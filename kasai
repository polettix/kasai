#!/usr/bin/env perl
use 5.024001;
use warnings;
use experimental qw< postderef signatures >;
no warnings qw< experimental::postderef experimental::signatures >;
use Log::Any::Adapter 'Stderr';

BEGIN {
   if (!eval { require Curses }) {
      require FindBin;
      $FindBin::Bin //= $FindBin::Bin;
      eval "use lib '$FindBin::Bin/local/lib/perl5'";
   }
}

use Curses;
use Log::Any::Adapter;

my $demo = {
   positions => [
      { id => 'traj-11',  neighbor_towards => { default => 'traj-12' } },
      { id => 'traj-11b', neighbor_towards => { default => 'traj-14' } },
      { id => 'traj-12',  neighbor_towards => { default => 'traj-13' } },
      { id => 'traj-13',  neighbor_towards => { default => 'traj-14' } },
      { id => 'traj-14',  neighbor_towards => { default => 'bumped-1' } },
      {
         id => 'bumped-1',
         neighbor_towards => {
            default     => 'pre-miss-1',
            alternative => 'traj-21',
         },
      },
      { id => 'pre-miss-1', neighbor_towards => { default => 'miss' } },

      { id => 'traj-21',  neighbor_towards => { default => 'traj-22' } },
      { id => 'traj-22',  neighbor_towards => { default => 'traj-23' } },
      { id => 'traj-23',  neighbor_towards => { default => 'traj-24' } },
      { id => 'traj-24',  neighbor_towards => { default => 'traj-25' } },
      { id => 'traj-25',  neighbor_towards => { default => 'traj-26' } },
      { id => 'traj-26',  neighbor_towards => { default => 'traj-27' } },
      { id => 'traj-27',  neighbor_towards => { default => 'bumped-2' } },
      {
         id => 'bumped-2',
         neighbor_towards => {
            default     => 'pre-miss-2',
            alternative => 'traj-31',
         },
      },
      { id => 'pre-miss-2', neighbor_towards => { default => 'miss' } },

      { id => 'traj-31',  neighbor_towards => { default => 'traj-32' } },
      { id => 'traj-32',  neighbor_towards => { default => 'traj-33' } },
      { id => 'traj-33',  neighbor_towards => { default => 'traj-34' } },
      { id => 'traj-34',  neighbor_towards => { default => 'traj-35' } },
      { id => 'traj-35',  neighbor_towards => { default => 'bumped-3' } },
      {
         id => 'bumped-3',
         neighbor_towards => {
            default     => 'pre-miss-3',
            alternative => 'traj-41',
         },
      },
      { id => 'pre-miss-3', neighbor_towards => { default => 'miss' } },

      { id => 'traj-41',  neighbor_towards => { default => 'traj-42' } },
      { id => 'traj-42',  neighbor_towards => { default => 'traj-43' } },
      { id => 'traj-43',  neighbor_towards => { default => 'safe' } },

      { id => 'miss' },
      { id => 'safe' },

      { id => 'left', neighbor_towards => { left => 'left', right => 'center' } },
      { id => 'center', neighbor_towards => { left => 'left', right => 'right' } },
      { id => 'right', neighbor_towards => { left => 'center', right => 'right' } },
   ],
   interactions => [
      {
         name => 'source',
         _class => 'Game::HandHeld::Interaction::Source',
         position_for => { default => 'traj-11' },
      },
      {
         name => 'sink',
         _class => 'Game::HandHeld::Interaction::Sink',
         position_for => { miss => 'miss', safe => 'safe' },
      },
      {
         name => 'catch',
         position_for => {
            catcher => 'left',
            target  => 'bumped-1',
         },
      },
      {
         name => 'catch',
         position_for => {
            catcher => 'center',
            target  => 'bumped-2',
         },
      },
      {
         name => 'catch',
         position_for => {
            catcher => 'right',
            target  => 'bumped-3',
         },
      },
   ],
   items => [
      {
         locked => 0,
         position => 'left',
         direction_for => {
            left   => {default => 'left',   catch => 'left'},
            center => {default => 'center', catch => 'center'},
            right  => {default => 'right',  catch => 'right'},
         },
      }
   ],
   sync_events => [
      {
         min_tick => 0,
         max_tick => -1,
         offset   => 0,
         period   => 25,
         name     => 'advance',
      },
      {
         min_tick => 0,
         max_tick => -1,
         offset   => 0,
         period   => 5 * 25,
         name     => 'generate',
      },
   ],
};

my $demo_curses = {
   position_for => {
      'traj-11'    => { x =>  1, y =>  3, draw => '*', erase => ' '},
      'traj-11b'   => { x =>  1, y =>  6, draw => '*', erase => ' '},
      'traj-12'    => { x =>  2, y =>  4, draw => '*', erase => ' '},
      'traj-13'    => { x =>  3, y =>  6, draw => '*', erase => ' '},
      'traj-14'    => { x =>  4, y =>  8, draw => '*', erase => ' '},
      'bumped-1'   => { x =>  5, y => 11, draw => '*', erase => ' '},
      'pre-miss-1' => { x =>  5, y => 13, draw => 'XXX', erase => '---'},
      'traj-21'    => { x =>  7, y =>  8, draw => '*', erase => ' '},
      'traj-22'    => { x =>  9, y =>  6, draw => '*', erase => ' '},
      'traj-23'    => { x => 12, y =>  4, draw => '*', erase => ' '},
      'traj-24'    => { x => 16, y =>  3, draw => '*', erase => ' '},
      'traj-25'    => { x => 20, y =>  4, draw => '*', erase => ' '},
      'traj-26'    => { x => 23, y =>  6, draw => '*', erase => ' '},
      'traj-27'    => { x => 25, y =>  8, draw => '*', erase => ' '},
      'bumped-2'   => { x => 27, y => 11, draw => '*', erase => ' '},
      'pre-miss-2' => { x => 27, y => 13, draw => 'XXX', erase => '---'},
      'traj-31'    => { x => 29, y =>  8, draw => '*', erase => ' '},
      'traj-32'    => { x => 32, y =>  6, draw => '*', erase => ' '},
      'traj-33'    => { x => 36, y =>  5, draw => '*', erase => ' '},
      'traj-34'    => { x => 40, y =>  6, draw => '*', erase => ' '},
      'traj-35'    => { x => 43, y =>  8, draw => '*', erase => ' '},
      'bumped-3'   => { x => 45, y => 11, draw => '*', erase => ' '},
      'pre-miss-3' => { x => 45, y => 13, draw => 'XXX', erase => '---'},
      'traj-41'    => { x => 47, y =>  9, draw => '*', erase => ' '},
      'traj-42'    => { x => 50, y =>  8, draw => '*', erase => ' '},
      'traj-43'    => { x => 53, y =>  9, draw => '*', erase => ' '},

      'left'     => { x =>  3, y => 12, draw => '@---@', erase => '     '},
      'center'   => { x => 25, y => 12, draw => '@---@', erase => '     '},
      'right'    => { x => 43, y => 12, draw => '@---@', erase => '     '},

      _counter => {
         score => { x => 26, y =>  0 },
         miss  => { x => 32, y =>  0 },
      },
   },
   background => <<'END',
[  ~~~~~ ~~~~                                      MISS
|=~~~~ ~~~                                              
|~~~
[                
|=                   
|                                    
[                                        
|=
|                                                  
[                                                     
|=                                                     __n_
|                                                     [ +  \
[                                                     "o--o"
------------------------------------------------------------
END
   misses => [
      { x => 51, y => 1, draw => '0', erase => ' ' },
      { x => 53, y => 1, draw => '0', erase => ' ' },
      { x => 55, y => 1, draw => '0', erase => ' ' },
   ],
};

package Game::HandHeld::Interface::Curses {
   use Moo;
   use 5.024001;
   use warnings;
   use experimental qw< postderef signatures >;
   no warnings qw< experimental::postderef experimental::signatures >;
   use Log::Any '$log';
   use Curses;
   use Time::HiRes qw< clock_gettime CLOCK_MONOTONIC >;
   use constant FRAMES_PER_SECOND => 25;
   use constant FRAME_DURATION    => (1.0 / FRAMES_PER_SECOND);

   has _game => (is => 'ro', required => 1, init_arg => 'game');
   has _background => (is => 'ro', default => undef, init_arg => 'background');
   has _positions => (is => 'ro', required => 1, init_arg => 'position_for');
   has _win => (is => 'lazy', predicate => 1);

   sub DEMOLISH ($self, $in_global_destruction) {
      endwin() if $self->_win;
   }

   sub __set_bg ($win, $background) {
      return unless defined $background;
      my @background = split m{\n}mxs, $background;
      $win->addstr($_, 0, $background[$_]) for 0 .. $#background;
      $win->refresh;
      return;
   }

   sub set_background ($self, $background) {
      $self->_background(undef); # disable call in _build__win in case
      __set_bg($self->win, $background);
      $self->_background($background);
      return $self;
   }

   sub _build__win ($self) {
      my $win = Curses->new;
      curs_set(0);
      noecho();
      $win->keypad(1);
      __set_bg($win, $self->_background);
      return $win;
   }

   sub _update_counters ($self) {
      my $game = $self->_game;
      my $win = $self->_win;
      my $cpf = $self->_positions->{_counter};
      while (my ($counter, $ui_data) = each $cpf->%*) {
         my $value = $game->total($counter) // 0;
      $log->debug("counter<$counter><$value>");
         $win->addstr($ui_data->@{qw< y x >}, $value);
      }
   }

   sub _update ($self, $event) {
      my $game = $self->_game;
      my $win  = $self->_win;
      if ($event eq 'tick') { $game->tick }
      else                  { $game->update($event) }
      my @positions = $game->positions;
      for my $position (@positions) {
         my $ud = $position->ui_data or next;
         my $current = $position->is_busy ? 'draw' : 'erase';
         next if $current eq ($ud->{previous} //= 'erase');
         $ud->{previous} = $current;
         $win->addstr($ud->@{'y', 'x', $current});
      }

      $self->_update_counters;

      #my $misses = $game->total('miss') // 0;
      #$win->addstr($demo_curses->{misses}[$_]->@{qw< y x draw >})
      #   for 0 .. $misses - 1;
      $win->refresh;
   }

   sub run ($self) {
      my $game = $self->_game;
      $game->set_ui_data($self->_positions); # FIXME too many times?
      my $win = $self->_win;
      my $alarm = clock_gettime(CLOCK_MONOTONIC);
      DONE:
      while (! $game->is_over) {
         INPUT:
         while ((my $clk = clock_gettime(CLOCK_MONOTONIC)) < $alarm) {
            #if (my @ready = $selector->can_read($alarm - $clk)) {
            #   my $key = $win->getch;
            $win->timeout(int(1000 * ($alarm - $clk)));
            my ($ch, $key) = $win->getch;
            if (defined ($key //= $ch)) {
               next INPUT              if $key eq ERR;
               last DONE               if $key eq 'q' || $key eq "\x{1b}";
               $self->_update('left')  if $key eq 'a' || $key eq '260';
               $self->_update('right') if $key eq 'l' || $key eq '261';
            }
            else {
               last DONE;
            }
         }
         $self->_update('tick');
         $alarm += FRAME_DURATION;
      }
      if ($game->is_over) {
         $win->addstr(3, 20, 'GAME OVER');
         $win->refresh;
         $win->timeout(-1);
         $win->getch;
      }
      return;
   }
}

use Game::HandHeld;
my $cg = Game::HandHeld::Interface::Curses->new(
   game => Game::HandHeld->new($demo),
   $demo_curses->%*,
);
$cg->run;
exit 0;

__DATA__
$[  ~~~~~ ~~~~            $                         MISS
0|=~~~~ ~~~                                         0 0 0
 |~~~
@[1              0
@|=1         0       0
@|                                   0
@[2 1     0             0        0       0
@|=
@|   0  0                 0   0             0      0
@[                                              0     0
@|=                                                     __n_
?|    0                     0                 0        [ +  \
&[  @---@                 @---@             @---@      "o--o"
-------------------------------------------------------------
