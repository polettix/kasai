#!/usr/bin/env perl
use 5.024;
use warnings;
use experimental qw< postderef signatures >;
no warnings qw< experimental::postderef experimental::signatures >;
use FindBin '$Bin';
use Path::Tiny 'path';
use Curses;
use Game::HandHeld::Interface::Curses;
use Data::Dumper;
use Try::Catch;
use Ouch ':trytiny_var';
use Log::Any '$log';
use Log::Any::Adapter 'Stderr';
$Data::Dumper::Indent = 1;
$|++;

try {
   my $name = get_game(@ARGV);
   my %paths = game_paths($name);
   my $if = Game::HandHeld::Interface::Curses->new_from_files(%paths);
   $if->run;
}
catch {
   $log->error(bleep);
   $log->error("$_") if $ENV{DEBUG};
   exit 1;
};

exit 0;

sub directories { map {path($_)} '.', $Bin }

sub get_game (@request) {
   return $request[0] if @request;
   @request = games_guesses() or die "no game to be found\n";
   return $request[0] if @request == 1;
   say 'Available choices:';
   say "- $_" for @request;
   exit 1;
}

sub games_guesses {
   my %flag;
   my @dirs = directories();
   for my $dir (@dirs) {
      CANDIDATE:
      for my $candidate ($dir->children) {
         (my $rootname = $candidate->basename) =~ s{\.hhc\z}{}mxs
            or next CANDIDATE;
         my $gamefile = $rootname . '.hhg';
         for my $cdir (@dirs) {
            next unless $cdir->child($gamefile)->exists;
            $flag{$rootname} = 1;
            next CANDIDATE;
         }
      }
   }
   return sort {$a cmp $b} keys %flag;
}

sub game_paths ($name) {
   my %retval;
   my %kinds = (hhg => 1, hhc => 1);
   my @dirs = directories();
   while (@dirs && scalar keys %kinds) {
      my $dir = shift @dirs;
      for my $kind (keys %kinds) {
         my $candidate = $dir->child($name . '.' . $kind);
         next unless $candidate->exists;
         $retval{$kind} = $candidate;
         delete $kinds{$kind};
      }
   }
   return (
      game => $retval{hhg}->stringify,
      ui   => $retval{hhc}->stringify,
   );
}
